#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, zlib

DATA_SIZE = 1375

class Sender:
	def __init__(self, host, port):
		self.host = host
		self.remote_port = int(port)
		self.log("Sender starting up using port %s" % self.remote_port)
		self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		self.socket.bind(('0.0.0.0', 0))
		self.waiting = False
		

	def log(self, message):
		sys.stderr.write(message + "\n")
		sys.stderr.flush()

	def send(self, message):
		self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

	def run(self):
		seq_num = 0 # next sequence number to send out
		sent_msgs = {}
		next_seq_num = 0 # next sequence number that should be acked
		rec_ack_this_loop = False
		rtt = 0.5
		window_size = 1.0
		ssthresh = 4
		received_ack = []
		
		while True:
			sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
			socks = select.select(sockets, [], [], 0.1)[0]
			for conn in socks:
				if conn == self.socket:
					k, addr = conn.recvfrom(65535)
					now = time.monotonic()
					try: # Check if JSON corrupted
						msg = json.loads(k.decode('utf-8'))
					except json.decoder.JSONDecodeError:
						break

					received_ack.append(msg["seq_num"])
					if msg["seq_num"] in sent_msgs:
						rtt = now - sent_msgs[msg["seq_num"]]["timestamp"]

						if msg["seq_num"] == next_seq_num:
							if window_size < ssthresh:
								window_size += 1.0
							else:
								window_size += 1.0 / window_size
							del sent_msgs[msg["seq_num"]]
							next_seq_num += 1
							rec_ack_this_loop = True
						else:
							if received_ack.count(msg["seq_num"]) >= 3:
								received_ack = [ack for ack in received_ack if ack != msg["seq_num"]]
								# retransmit
								sent_msg = sent_msgs[msg["seq_num"]]
								sent_msg["timestamp"] = now
								sent_msg["retransmitted"] = True
								self.send(sent_msg)
								window_size = window_size / 2
						
					self.log("Received message '%s'" % msg)

					
					if len(sent_msgs) == 0:
						self.waiting = False
				elif conn == sys.stdin and self.waiting == False:
					for i in range(0, int(window_size)):
						data = sys.stdin.read(DATA_SIZE)
						if len(data) == 0 and len(sent_msgs) == 0:
							self.log("All done!")
							sys.exit(0)

						msg = { "type": "msg", "data": data, "seq_num": seq_num, "timestamp": time.monotonic(), "retransmitted": False, "checksum": zlib.crc32(data.encode('utf-8'))}
						sent_msgs[seq_num] = msg
						self.log("Sending message '%s'" % msg)
						self.send(msg)
						seq_num += 1
					self.waiting = True
					
			#check all sent messages for timestamps and retransmit
			if not rec_ack_this_loop:
				for sent_msg in sent_msgs.values():
					cur_time = time.monotonic()
					if (cur_time - sent_msg["timestamp"]) > 2.0 * rtt and sent_msg["seq_num"] == next_seq_num:
						sent_msg["timestamp"] = cur_time
						sent_msg["retransmitted"] = True
						self.log("Sending message '%s' AGAIN" % sent_msg)
						self.send(sent_msg)

						ssthresh = window_size / 2.0
						window_size = 1.0
						
						break
			rec_ack_this_loop = False
		return

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='send data')
	parser.add_argument('host', type=str, help="Remote host to connect to")
	parser.add_argument('port', type=int, help="UDP port number to connect to")
	args = parser.parse_args()
	sender = Sender(args.host, args.port)
	sender.run()
