#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, zlib

class Receiver:
	def __init__(self):
		self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		self.socket.bind(('0.0.0.0', 0))
		self.port = self.socket.getsockname()[1]
		self.log("Bound to port %d" % self.port)

		self.remote_host = None
		self.remote_port = None

	def send(self, message):
		self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

	def log(self, message):
		sys.stderr.write(message + "\n")
		sys.stderr.flush()

	def send_next_ack(self, msg):
		# Print out the data to stdout
		print(msg["data"], end='', flush=True)

		# Always send back an ack
		self.send({ "type": "ack", "seq_num": msg["seq_num"] })
		self.log("Sending ack '%s'" % msg["seq_num"])
				

	def run(self):
		seq_num = 0
		window = []

		while True:
			socks = select.select([self.socket], [], [])[0]
			for conn in socks:
				data, addr = conn.recvfrom(65535)

				# Grab the remote host/port if we don't alreadt have it
				if self.remote_host is None:
					self.remote_host = addr[0]
					self.remote_port = addr[1]

				try: # Check if JSON corrupted
					msg = json.loads(data.decode('utf-8'))
				except json.decoder.JSONDecodeError:
					break
				
				if not all(key in msg for key in ["type", "data", "seq_num", "timestamp", "retransmitted", "checksum"]):
					break

				if zlib.crc32(msg["data"].encode('utf-8')) != msg["checksum"]:
					break							 
				
				self.log("Received data message %s" % msg)
				if msg["seq_num"] < seq_num:
					if msg["retransmitted"]:
						self.send({ "type": "ack", "seq_num": msg["seq_num"] })
						self.log("Sending ack '%s' from retransmission" % msg["seq_num"])
					break
					
					
				window.append(msg)
				window.sort(key = lambda msg: msg["seq_num"])
				for msg in window:
					if msg["seq_num"] == seq_num:
						seq_num += 1
						self.send_next_ack(msg)
						window.remove(msg)
					
		return

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='receive data')
	args = parser.parse_args()
	sender = Receiver()
	sender.run()
